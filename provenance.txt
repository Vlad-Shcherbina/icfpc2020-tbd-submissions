### Binary
cargo build -p tbd --bin bee_player --release


### Base commit
d3280ce
WIP and more Vec2 utils
Vlad Shcherbina
Mon Jul 20 08:44:42 2020 +0300


### Local changes on top of this base commit

diff --git a/src/bin/bee_player.rs b/src/bin/bee_player.rs
index f943f8a..8d09588 100644
--- a/src/bin/bee_player.rs
+++ b/src/bin/bee_player.rs
@@ -5,7 +5,7 @@ use tbd::bot_util::*;
 
 pub struct Bee {}
 
-pub fn acc(Vec2 { x, y }: Vec2) -> Vec2 {
+fn ccw(Vec2 { x, y }: Vec2) -> Vec2 {
     if x > 0 {
         if y > 0 {
             Vec2 { x: 1, y: -1 }
@@ -21,9 +21,45 @@ pub fn acc(Vec2 { x, y }: Vec2) -> Vec2 {
     }
 }
 
-// pub fn predict(mut pos: Vec2, mut vel: Vec2, mut thrust: i128)
+fn predict(mut pos: Vec2, mut vel: Vec2, mut control: i128) -> Vec<Vec2> {
+    let mut result = Vec::new();
+    for _ in 0..250 {
+        let a = ccw(pos);
+        if control > 0 {
+            vel = vel + a;
+            control -= 1;
+        }
+        if control < 0 {
+            vel = vel - a;
+            control += 1;
+        }
+        vel = vel + get_gravity(pos);
+        pos = pos + vel;
+        result.push(pos)
+    }
+    result
+}
 
-pub fn norm_range(mut pos: Vec2, mut vel: Vec2, time: i32) -> (i128, i128) {
+fn def_score(trajectory: &[Vec2], field: &Field) -> i128 {
+    let mut min = 1000000;
+    for (i, &p) in trajectory.iter().enumerate() {
+        if i < 50 {
+            if p.norm() <= field.planet_radius + 3 {
+                return -1000;
+            }
+            if p.norm() >= field.field_radius - 5 {
+                return -1000;
+            }
+        }
+        if p.norm() >= field.field_radius - 5 {
+            return -500;
+        }
+        min = min.min(p.norm());
+    }
+    return min
+}
+
+/*pub fn norm_range(mut pos: Vec2, mut vel: Vec2, time: i32) -> (i128, i128) {
     let mut min = pos.norm();
     let mut max = pos.norm();
     for _ in 0..time {
@@ -43,7 +79,7 @@ pub fn defender_norm_score((min, max): (i128, i128), field: &Field) -> i128 {
         return -1000;
     }
     min
-}
+}*/
 
 impl Ai for Bee {
     fn choose_join_request(&mut self) -> JoinRequest {
@@ -69,7 +105,18 @@ impl Ai for Bee {
             let pos = s.position;
             let vel = s.velocity;
 
-            let a = acc(pos);
+            let control = (-30..=30).max_by_key(|&control|
+                def_score(&predict(pos, vel, control), field)).unwrap();
+
+            let a = ccw(pos);
+            if control != 0 {
+                commands.push(Command::Accelerate {
+                    ship_id: s.ship_id,
+                    vector: if control > 0 { -a } else { a },
+                });
+            }
+
+            /*let a = acc(pos);
 
             let fwd = defender_norm_score(norm_range(pos, vel + a, time), field);
             let hold = defender_norm_score(norm_range(pos, vel, time), field);
@@ -79,7 +126,8 @@ impl Ai for Bee {
                     ship_id: s.ship_id,
                     vector: if fwd > back { -a } else { a },
                 });
-            }
+            }*/
+
             /*let a = acc(s.position);
             if predict_collisions(s.position, s.velocity + a, field).fly_off.is_none() {
                 commands.push(Command::Accelerate {
