### Binary
cargo build -p tbd --bin example_submission --release


### Base commit
b8f84d1
Generalize endpoints to allow connection to submission server
Vlad Shcherbina
Sun Jul 19 00:29:21 2020 +0300


### Local changes on top of this base commit

diff --git a/src/bin/example_submission.rs b/src/bin/example_submission.rs
index 24c7651..6973dc2 100644
--- a/src/bin/example_submission.rs
+++ b/src/bin/example_submission.rs
@@ -1,7 +1,9 @@
 use tbd::{webapi::Endpoint, ufolang::Protocol, squiggle::Data};
 
 fn main() {
-    let protocol = Protocol::load_galaxy();
+    // do we even need headless galaxy,
+    // or could we get away with ufo-http-api?
+    let _protocol = Protocol::load_galaxy();
 
     let args: Vec<String> = std::env::args().collect();
     assert_eq!(args.len(), 3);
@@ -9,15 +11,13 @@ fn main() {
     let player_key = &args[2];
     println!("Server URL: {}", server_url);
     println!("Player key: {}", player_key);
-    let endpoint = &Endpoint::SubmissionServer { url: server_url };
+    let endpoint = Endpoint::SubmissionServer { url: format!("{}/aliens/send", server_url) };
     let player_key: i128 = player_key.parse().unwrap();
 
-    let mut state = Data::Nil;
-
     // JOIN
-    let data_in = Data::make_list3(2, player_key, Data::Nil);
-    let result = protocol.interact(state, data_in, endpoint);
-    dbg!(&result);
+    let req = Data::make_list3(2, player_key, Data::Nil);
+    let resp = endpoint.aliens_send(req);
+    dbg!(resp);
 
     // let resp = ureq::post(&server_url).send_string(player_key);
     // assert!(resp.ok(), "{:?}", resp);
