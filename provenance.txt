### Binary
cargo build -p tbd --bin example_submission --release


### Base commit
b8f84d1
Generalize endpoints to allow connection to submission server
Vlad Shcherbina
Sun Jul 19 00:29:21 2020 +0300


### Local changes on top of this base commit

diff --git a/src/bin/example_submission.rs b/src/bin/example_submission.rs
index 24c7651..55b3225 100644
--- a/src/bin/example_submission.rs
+++ b/src/bin/example_submission.rs
@@ -1,23 +1,19 @@
 use tbd::{webapi::Endpoint, ufolang::Protocol, squiggle::Data};
 
 fn main() {
-    let protocol = Protocol::load_galaxy();
-
     let args: Vec<String> = std::env::args().collect();
     assert_eq!(args.len(), 3);
     let server_url = args[1].clone();
     let player_key = &args[2];
-    println!("Server URL: {}", server_url);
-    println!("Player key: {}", player_key);
-    let endpoint = &Endpoint::SubmissionServer { url: server_url };
+    eprintln!("Server URL: {}", server_url);
+    eprintln!("Player key: {}", player_key);
+    let endpoint = Endpoint::SubmissionServer { url: format!("{}/aliens/send", server_url) };
     let player_key: i128 = player_key.parse().unwrap();
 
-    let mut state = Data::Nil;
-
     // JOIN
-    let data_in = Data::make_list3(2, player_key, Data::Nil);
-    let result = protocol.interact(state, data_in, endpoint);
-    dbg!(&result);
+    let req = Data::make_list3(2, player_key, Data::Nil);
+    let resp = endpoint.aliens_send(req);
+    dbg!(resp);
 
     // let resp = ureq::post(&server_url).send_string(player_key);
     // assert!(resp.ok(), "{:?}", resp);
diff --git a/src/webapi.rs b/src/webapi.rs
index fbe2380..163b829 100644
--- a/src/webapi.rs
+++ b/src/webapi.rs
@@ -18,7 +18,7 @@ impl Endpoint {
         // convert to string
         let modulated = modulated.iter().map(|&x| x.to_string()).collect::<Vec<_>>().join("");
 
-        println!("sending {}", modulated);
+        eprintln!("sending {}", modulated);
 
         let response = match self {
             Endpoint::NoComms => panic!(),
@@ -35,14 +35,14 @@ impl Endpoint {
 
         if !response.ok() {
             // TODO: if there is rate limiting, do something about it.
-            println!("got status {} {}", response.status(), response.status_text());
-            println!("is api key correct?");
+            eprintln!("got status {} {}", response.status(), response.status_text());
+            eprintln!("is api key correct?");
             panic!();
         }
 
         let response = response.into_string().expect("valid response");
 
-        println!("got response {}", response);
+        eprintln!("got response {}", response);
         let response = bytes_to_squiggle(response.as_bytes()).expect("response is 01");
         let demodulated = demodulate(response.iter());
         demodulated.expect("valid demodulate").0
